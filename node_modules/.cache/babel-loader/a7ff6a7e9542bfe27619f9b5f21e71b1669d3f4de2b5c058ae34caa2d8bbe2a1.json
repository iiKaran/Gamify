{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niten\\\\Desktop\\\\React\\\\Gamify\\\\src\\\\Games\\\\WordGame\\\\Word.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./word-scramble.sass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORDS = [\"React\", \"Next\", \"Website\", \"Engineer\", \"TypeScript\", \"Developer\", \"Dream Job\", \"Time to code\"];\nexport default function Word() {\n  _s();\n  const [isPlayOn, setIsPlayOn] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [scrambledWord, setScrambledWord] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const handleInputChange = event => {\n    setInputValue(event.target.value.toUpperCase());\n  };\n  const selectWord = () => {\n    const randomIndex = Math.floor(Math.random() * WORDS.length);\n    const tempWord = WORDS[randomIndex];\n    return tempWord;\n  };\n  const handleButtonClick = () => {\n    if (inputValue !== \"\") {\n      if (correctWord === inputValue) {\n        setMessage(\"Correct Answer\");\n      } else {\n        setMessage(\"Wrong Answer\");\n      }\n    }\n  };\n  const handleStartGame = () => {\n    setIsPlayOn(true);\n    setInputValue(\"\");\n    setMessage(\"\");\n    const word = selectWord().toUpperCase();\n    setCorrectWord(word);\n    setScrambledWord(constructScrambledWord(word));\n    //setScrambledWord(constructScrambledWordModernJS(word));\n  };\n\n  const constructScrambledWord = word => {\n    const shuffledArray = word.split(\"\");\n    for (let i = shuffledArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n    }\n    return shuffledArray.join(\"\");\n  };\n  const constructScrambledWordModernJS = word => {\n    const shuffledArray = word.split(\"\").reduce((newArr, _, i) => {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n      return newArr;\n    }, [...word]);\n    return shuffledArray.join(\"\");\n  };\n  useEffect(() => {\n    let clearMessage;\n    if (message === \"Wrong Answer\") {\n      clearMessage = setTimeout(() => setMessage(\"\"), 800);\n    }\n    return () => {\n      if (clearMessage) {\n        clearTimeout(clearMessage);\n      }\n    };\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Word\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(Word, \"9TYHlcqQl2/K5/kvYLkiYlBLEbs=\");\n_c = Word;\nvar _c;\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WORDS","Word","_s","isPlayOn","setIsPlayOn","inputValue","setInputValue","correctWord","setCorrectWord","scrambledWord","setScrambledWord","message","setMessage","handleInputChange","event","target","value","toUpperCase","selectWord","randomIndex","Math","floor","random","length","tempWord","handleButtonClick","handleStartGame","word","constructScrambledWord","shuffledArray","split","i","j","join","constructScrambledWordModernJS","reduce","newArr","_","clearMessage","setTimeout","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/niten/Desktop/React/Gamify/src/Games/WordGame/Word.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./word-scramble.sass\";\r\n\r\nconst WORDS = [\r\n\t\"React\",\r\n\t\"Next\",\r\n\t\"Website\",\r\n\t\"Engineer\",\r\n\t\"TypeScript\",\r\n\t\"Developer\",\r\n\t\"Dream Job\",\r\n\t\"Time to code\",\r\n];\r\n\r\nexport default function Word() {\r\n    const [isPlayOn, setIsPlayOn] = useState(false);\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\tconst [correctWord, setCorrectWord] = useState(\"\");\r\n\tconst [scrambledWord, setScrambledWord] = useState(\"\");\r\n\r\n\tconst [message, setMessage] = useState(\"\");\r\n\r\n\tconst handleInputChange = (event) => {\r\n\t\tsetInputValue(event.target.value.toUpperCase());\r\n\t};\r\n\r\n\tconst selectWord = () => {\r\n\t\tconst randomIndex = Math.floor(Math.random() * WORDS.length);\r\n\t\tconst tempWord = WORDS[randomIndex];\r\n\t\treturn tempWord;\r\n\t};\r\n\r\n\tconst handleButtonClick = () => {\r\n\t\tif (inputValue !== \"\") {\r\n\t\t\tif (correctWord === inputValue) {\r\n\t\t\t\tsetMessage(\"Correct Answer\");\r\n\t\t\t} else {\r\n\t\t\t\tsetMessage(\"Wrong Answer\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleStartGame = () => {\r\n\t\tsetIsPlayOn(true);\r\n\t\tsetInputValue(\"\");\r\n\t\tsetMessage(\"\");\r\n\r\n\t\tconst word = selectWord().toUpperCase();\r\n\t\tsetCorrectWord(word);\r\n\t\tsetScrambledWord(constructScrambledWord(word));\r\n\t\t//setScrambledWord(constructScrambledWordModernJS(word));\r\n\t};\r\n\r\n\tconst constructScrambledWord = (word) => {\r\n\t\tconst shuffledArray = word.split(\"\");\r\n\t\tfor (let i = shuffledArray.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t[shuffledArray[i], shuffledArray[j]] = [\r\n\t\t\t\tshuffledArray[j],\r\n\t\t\t\tshuffledArray[i],\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn shuffledArray.join(\"\");\r\n\t};\r\n\r\n\tconst constructScrambledWordModernJS = (word) => {\r\n\t\tconst shuffledArray = word.split(\"\").reduce(\r\n\t\t\t(newArr, _, i) => {\r\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t\t[newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n\t\t\t\treturn newArr;\r\n\t\t\t},\r\n\t\t\t[...word]\r\n\t\t);\r\n\r\n\t\treturn shuffledArray.join(\"\");\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet clearMessage;\r\n\t\tif (message === \"Wrong Answer\") {\r\n\t\t\tclearMessage = setTimeout(() => setMessage(\"\"), 800);\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\tif (clearMessage) {\r\n\t\t\t\tclearTimeout(clearMessage);\r\n\t\t\t}\r\n\t\t};\r\n\t}, [message]);\r\n\r\n  return (\r\n    <div>Word</div>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}