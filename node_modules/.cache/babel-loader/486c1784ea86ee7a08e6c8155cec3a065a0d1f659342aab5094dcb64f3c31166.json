{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niten\\\\Desktop\\\\React\\\\Gamify\\\\src\\\\Games\\\\Snake.js\";\nimport React from 'react';\nimport './Snake.css';\n// import { Location } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst playBoard = document.querySelector(\".play-board\");\nconst scoreElement = document.querySelector(\".score\");\nconst highScoreElement = document.querySelector(\".high-score\");\nconst controls = document.querySelectorAll(\".controls i\");\nlet gameOver = false;\nlet foodX, foodY;\nlet snakeX = 5,\n  snakeY = 5;\nlet velocityX = 0,\n  velocityY = 0;\nlet snakeBody = [];\nlet setIntervalId;\nlet score = 0;\nconst updateFoodPosition = () => {\n  // Passing a random 1 - 30 value as food position\n  foodX = Math.floor(Math.random() * 30) + 1;\n  foodY = Math.floor(Math.random() * 30) + 1;\n};\nconst handleGameOver = () => {\n  // Clearing the timer and reloading the page on game over\n  clearInterval(setIntervalId);\n  alert(\"Game Over! Press OK to replay...\");\n  // location.reload();\n};\n\nconst changeDirection = e => {\n  // Changing velocity value based on key press\n  if (e.key === \"ArrowUp\" && velocityY != 1) {\n    velocityX = 0;\n    velocityY = -1;\n  } else if (e.key === \"ArrowDown\" && velocityY != -1) {\n    velocityX = 0;\n    velocityY = 1;\n  } else if (e.key === \"ArrowLeft\" && velocityX != 1) {\n    velocityX = -1;\n    velocityY = 0;\n  } else if (e.key === \"ArrowRight\" && velocityX != -1) {\n    velocityX = 1;\n    velocityY = 0;\n  }\n};\n\n// Calling changeDirection on each key click and passing key dataset value as an object\ncontrols.forEach(button => button.addEventListener(\"click\", () => changeDirection({\n  key: button.dataset.key\n})));\nconst initGame = () => {\n  if (gameOver) return handleGameOver();\n  let html = `<div class=\"food\" style=\"grid-area: ${foodY} / ${foodX}\"></div>`;\n\n  // Checking if the snake hit the food\n  if (snakeX === foodX && snakeY === foodY) {\n    updateFoodPosition();\n    snakeBody.push([foodY, foodX]); // Pushing food position to snake body array\n    score++; // increment score by 1\n    highScore = score >= highScore ? score : highScore;\n    localStorage.setItem(\"high-score\", highScore);\n    scoreElement.innerText = `Score: ${score}`;\n    highScoreElement.innerText = `High Score: ${highScore}`;\n  }\n  // Updating the snake's head position based on the current velocity\n  snakeX += velocityX;\n  snakeY += velocityY;\n\n  // Shifting forward the values of the elements in the snake body by one\n  for (let i = snakeBody.length - 1; i > 0; i--) {\n    snakeBody[i] = snakeBody[i - 1];\n  }\n  snakeBody[0] = [snakeX, snakeY]; // Setting first element of snake body to current snake position\n\n  // Checking if the snake's head is out of wall, if so setting gameOver to true\n  if (snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30) {\n    return gameOver = true;\n  }\n  for (let i = 0; i < snakeBody.length; i++) {\n    // Adding a div for each part of the snake's body\n    html += `<div class=\"head\" style=\"grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}\"></div>`;\n    // Checking if the snake head hit the body, if so set gameOver to true\n    if (i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0] === snakeBody[i][0]) {\n      gameOver = true;\n    }\n  }\n  playBoard.innerHTML = html;\n};\nupdateFoodPosition();\nsetIntervalId = setInterval(initGame, 100);\ndocument.addEventListener(\"keyup\", changeDirection);\nexport default function Snake() {\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"game-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"score\",\n          children: \"Score: 0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"high-score\",\n          children: \"High Score: 0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"play-board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          \"data-key\": \"ArrowLeft\",\n          class: \"fa-solid fa-arrow-left-long\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          \"data-key\": \"ArrowUp\",\n          class: \"fa-solid fa-arrow-up-long\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          \"data-key\": \"ArrowRight\",\n          class: \"fa-solid fa-arrow-right-long\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          \"data-key\": \"ArrowDown\",\n          class: \"fa-solid fa-arrow-down-long\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_c = Snake;\nvar _c;\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","playBoard","document","querySelector","scoreElement","highScoreElement","controls","querySelectorAll","gameOver","foodX","foodY","snakeX","snakeY","velocityX","velocityY","snakeBody","setIntervalId","score","updateFoodPosition","Math","floor","random","handleGameOver","clearInterval","alert","changeDirection","e","key","forEach","button","addEventListener","dataset","initGame","html","push","highScore","localStorage","setItem","innerText","i","length","innerHTML","setInterval","Snake","children","class","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/niten/Desktop/React/Gamify/src/Games/Snake.js"],"sourcesContent":["import React from 'react'\r\nimport './Snake.css'\r\n// import { Location } from 'react-router-dom';\r\n\r\nconst playBoard = document.querySelector(\".play-board\");\r\nconst scoreElement = document.querySelector(\".score\");\r\nconst highScoreElement = document.querySelector(\".high-score\");\r\nconst controls = document.querySelectorAll(\".controls i\");\r\nlet gameOver = false;\r\nlet foodX, foodY;\r\nlet snakeX = 5, snakeY = 5;\r\nlet velocityX = 0, velocityY = 0;\r\nlet snakeBody = [];\r\nlet setIntervalId;\r\nlet score = 0;\r\nconst updateFoodPosition = () => {\r\n    // Passing a random 1 - 30 value as food position\r\n    foodX = Math.floor(Math.random() * 30) + 1;\r\n    foodY = Math.floor(Math.random() * 30) + 1;\r\n}\r\n\r\nconst handleGameOver = () => {\r\n    // Clearing the timer and reloading the page on game over\r\n    clearInterval(setIntervalId);\r\n    alert(\"Game Over! Press OK to replay...\");\r\n    // location.reload();\r\n}\r\n\r\nconst changeDirection = e => {\r\n    // Changing velocity value based on key press\r\n    if(e.key === \"ArrowUp\" && velocityY != 1) {\r\n        velocityX = 0;\r\n        velocityY = -1;\r\n    } else if(e.key === \"ArrowDown\" && velocityY != -1) {\r\n        velocityX = 0;\r\n        velocityY = 1;\r\n    } else if(e.key === \"ArrowLeft\" && velocityX != 1) {\r\n        velocityX = -1;\r\n        velocityY = 0;\r\n    } else if(e.key === \"ArrowRight\" && velocityX != -1) {\r\n        velocityX = 1;\r\n        velocityY = 0;\r\n    }\r\n}\r\n\r\n// Calling changeDirection on each key click and passing key dataset value as an object\r\ncontrols.forEach(button => button.addEventListener(\"click\", () => changeDirection({ key: button.dataset.key })));\r\n\r\nconst initGame = () => {\r\n    if(gameOver) return handleGameOver();\r\n    let html = `<div class=\"food\" style=\"grid-area: ${foodY} / ${foodX}\"></div>`;\r\n\r\n    // Checking if the snake hit the food\r\n    if(snakeX === foodX && snakeY === foodY) {\r\n        updateFoodPosition();\r\n        snakeBody.push([foodY, foodX]); // Pushing food position to snake body array\r\n        score++; // increment score by 1\r\n        highScore = score >= highScore ? score : highScore;\r\n        localStorage.setItem(\"high-score\", highScore);\r\n        scoreElement.innerText = `Score: ${score}`;\r\n        highScoreElement.innerText = `High Score: ${highScore}`;\r\n    }\r\n    // Updating the snake's head position based on the current velocity\r\n    snakeX += velocityX;\r\n    snakeY += velocityY;\r\n    \r\n    // Shifting forward the values of the elements in the snake body by one\r\n    for (let i = snakeBody.length - 1; i > 0; i--) {\r\n        snakeBody[i] = snakeBody[i - 1];\r\n    }\r\n    snakeBody[0] = [snakeX, snakeY]; // Setting first element of snake body to current snake position\r\n\r\n    // Checking if the snake's head is out of wall, if so setting gameOver to true\r\n    if(snakeX <= 0 || snakeX > 30 || snakeY <= 0 || snakeY > 30) {\r\n        return gameOver = true;\r\n    }\r\n\r\n    for (let i = 0; i < snakeBody.length; i++) {\r\n        // Adding a div for each part of the snake's body\r\n        html += `<div class=\"head\" style=\"grid-area: ${snakeBody[i][1]} / ${snakeBody[i][0]}\"></div>`;\r\n        // Checking if the snake head hit the body, if so set gameOver to true\r\n        if (i !== 0 && snakeBody[0][1] === snakeBody[i][1] && snakeBody[0][0] === snakeBody[i][0]) {\r\n            gameOver = true;\r\n        }\r\n    }\r\n    playBoard.innerHTML = html;\r\n}\r\n\r\nupdateFoodPosition();\r\nsetIntervalId = setInterval(initGame, 100);\r\ndocument.addEventListener(\"keyup\", changeDirection);\r\nexport default function Snake() {\r\n  return (\r\n    <body>\r\n          <div class=\"wrapper\">\r\n      <div class=\"game-details\">\r\n        <span class=\"score\">Score: 0</span>\r\n        <span class=\"high-score\">High Score: 0</span>\r\n      </div>\r\n      <div class=\"play-board\"></div>\r\n      <div class=\"controls\">\r\n        <i data-key=\"ArrowLeft\" class=\"fa-solid fa-arrow-left-long\"></i>\r\n        <i data-key=\"ArrowUp\" class=\"fa-solid fa-arrow-up-long\"></i>\r\n        <i data-key=\"ArrowRight\" class=\"fa-solid fa-arrow-right-long\"></i>\r\n        <i data-key=\"ArrowDown\" class=\"fa-solid fa-arrow-down-long\"></i>\r\n      </div>\r\n    </div>\r\n    </body>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}