{"ast":null,"code":"export default function BrickCollision(circle, rect) {\n  var distX = Math.abs(circle.x - rect.x - rect.width / 2);\n  var distY = Math.abs(circle.y - rect.y - rect.height / 2);\n  if (distX > rect.width / 2 + circle.rad) {\n    // return false;\n    return {\n      hit: false\n    };\n  }\n  if (distY > rect.height / 2 + circle.rad) {\n    // return false;\n    return {\n      hit: false\n    };\n  }\n  if (distX <= rect.width / 2) {\n    // return true;\n    return {\n      hit: true,\n      axis: \"Y\"\n    };\n  }\n  if (distY <= rect.height / 2) {\n    // return true;\n    return {\n      hit: true,\n      axis: \"X\"\n    };\n  }\n\n  // also test for corner collisions\n  var dx = distX - rect.width / 2;\n  var dy = distY - rect.height / 2;\n  // return dx * dx + dy * dy <= circle.rad * circle.rad;\n  return {\n    hit: dx * dx + dy * dy <= circle.rad * circle.rad,\n    axis: \"X\"\n  };\n}\n_c = BrickCollision;\nvar _c;\n$RefreshReg$(_c, \"BrickCollision\");","map":{"version":3,"names":["BrickCollision","circle","rect","distX","Math","abs","x","width","distY","y","height","rad","hit","axis","dx","dy","_c","$RefreshReg$"],"sources":["C:/Users/niten/Desktop/React/Gamify/src/Games/breakoutvideo/src/games/breakout/util/BrickCollision.js"],"sourcesContent":["export default function BrickCollision(circle, rect) {\r\n  var distX = Math.abs(circle.x - rect.x - rect.width / 2);\r\n  var distY = Math.abs(circle.y - rect.y - rect.height / 2);\r\n\r\n  if (distX > rect.width / 2 + circle.rad) {\r\n    // return false;\r\n    return {\r\n      hit: false,\r\n    };\r\n  }\r\n  if (distY > rect.height / 2 + circle.rad) {\r\n    // return false;\r\n    return {\r\n      hit: false,\r\n    };\r\n  }\r\n\r\n  if (distX <= rect.width / 2) {\r\n    // return true;\r\n    return {\r\n      hit: true,\r\n      axis: \"Y\",\r\n    };\r\n  }\r\n  if (distY <= rect.height / 2) {\r\n    // return true;\r\n    return {\r\n      hit: true,\r\n      axis: \"X\",\r\n    };\r\n  }\r\n\r\n  // also test for corner collisions\r\n  var dx = distX - rect.width / 2;\r\n  var dy = distY - rect.height / 2;\r\n  // return dx * dx + dy * dy <= circle.rad * circle.rad;\r\n  return {\r\n    hit: dx * dx + dy * dy <= circle.rad * circle.rad,\r\n    axis: \"X\",\r\n  };\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,cAAcA,CAACC,MAAM,EAAEC,IAAI,EAAE;EACnD,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACK,CAAC,GAAGJ,IAAI,CAACI,CAAC,GAAGJ,IAAI,CAACK,KAAK,GAAG,CAAC,CAAC;EACxD,IAAIC,KAAK,GAAGJ,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACQ,CAAC,GAAGP,IAAI,CAACO,CAAC,GAAGP,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC;EAEzD,IAAIP,KAAK,GAAGD,IAAI,CAACK,KAAK,GAAG,CAAC,GAAGN,MAAM,CAACU,GAAG,EAAE;IACvC;IACA,OAAO;MACLC,GAAG,EAAE;IACP,CAAC;EACH;EACA,IAAIJ,KAAK,GAAGN,IAAI,CAACQ,MAAM,GAAG,CAAC,GAAGT,MAAM,CAACU,GAAG,EAAE;IACxC;IACA,OAAO;MACLC,GAAG,EAAE;IACP,CAAC;EACH;EAEA,IAAIT,KAAK,IAAID,IAAI,CAACK,KAAK,GAAG,CAAC,EAAE;IAC3B;IACA,OAAO;MACLK,GAAG,EAAE,IAAI;MACTC,IAAI,EAAE;IACR,CAAC;EACH;EACA,IAAIL,KAAK,IAAIN,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC5B;IACA,OAAO;MACLE,GAAG,EAAE,IAAI;MACTC,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;EACA,IAAIC,EAAE,GAAGX,KAAK,GAAGD,IAAI,CAACK,KAAK,GAAG,CAAC;EAC/B,IAAIQ,EAAE,GAAGP,KAAK,GAAGN,IAAI,CAACQ,MAAM,GAAG,CAAC;EAChC;EACA,OAAO;IACLE,GAAG,EAAEE,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,IAAId,MAAM,CAACU,GAAG,GAAGV,MAAM,CAACU,GAAG;IACjDE,IAAI,EAAE;EACR,CAAC;AACH;AAACG,EAAA,GAxCuBhB,cAAc;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}