{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niten\\\\Desktop\\\\React\\\\Gamify\\\\src\\\\Games\\\\Hangman-Game\\\\Hangman.js\";\nimport React, { Component } from \"react\";\nimport { randomWord } from \"./RandomWord\";\nimport \"./Hangman.css\";\nimport image0 from \"./images/0.jpg\";\nimport image1 from \"./images/1.jpg\";\nimport image2 from \"./images/2.jpg\";\nimport image3 from \"./images/3.jpg\";\nimport image4 from \"./images/4.jpg\";\nimport image5 from \"./images/5.jpg\";\nimport image6 from \"./images/6.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Hangman extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noOfWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    };\n    this.handleGuess = this.handleGuess.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  reset() {\n    this.setState({\n      noOfWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    });\n  }\n  guessedWord() {\n    return this.state.answer.split(\"\").map(letter => this.state.guessed.has(letter) ? letter : \"_\");\n  }\n  handleGuess(evt) {\n    let letter = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(letter),\n      noOfWrong: st.noOfWrong + (st.answer.includes(letter) ? 0 : 1)\n    }));\n  }\n  generateKeypad() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n      value: letter,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(letter),\n      children: letter\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this));\n  }\n  render() {\n    const gameOver = this.state.noOfWrong >= this.props.maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n    let gameState = this.generateKeypad();\n    if (isWinner) gameState = \"Congrats, You have won the Game\";\n    if (gameOver) gameState = \"Better Luck Next Time\";\n    let restart = gameOver || isWinner;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hang-game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Hangman\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Hangman\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: this.props.images[this.state.noOfWrong],\n          alt: \"HangMan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Guessed Left: \", this.props.maxWrong - this.state.noOfWrong, \" /\", \" \", this.props.maxWrong]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Guess the Programming Language\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"Hangman-word\",\n          children: !gameOver ? this.guessedWord() : this.state.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"Hangman-btns\",\n          children: gameState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), restart && /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"reset\",\n          onClick: this.reset,\n          children: \"Restart?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this);\n  }\n}\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [image0, image1, image2, image3, image4, image5, image6]\n};\nexport default Hangman;","map":{"version":3,"names":["React","Component","randomWord","image0","image1","image2","image3","image4","image5","image6","jsxDEV","_jsxDEV","Hangman","constructor","props","state","noOfWrong","guessed","Set","answer","handleGuess","bind","reset","setState","guessedWord","split","map","letter","has","evt","target","value","st","add","includes","generateKeypad","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","render","gameOver","maxWrong","isWinner","join","gameState","restart","className","src","images","alt","id","defaultProps"],"sources":["C:/Users/niten/Desktop/React/Gamify/src/Games/Hangman-Game/Hangman.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { randomWord } from  \"./RandomWord\"\r\nimport \"./Hangman.css\";\r\nimport image0 from \"./images/0.jpg\"; \r\nimport image1 from \"./images/1.jpg\";\r\nimport image2 from \"./images/2.jpg\";\r\nimport image3 from \"./images/3.jpg\";\r\nimport image4 from \"./images/4.jpg\";\r\nimport image5 from \"./images/5.jpg\";\r\nimport image6 from \"./images/6.jpg\";\r\nclass Hangman extends Component {\r\n  static defaultProps = {\r\n    maxWrong: 6,\r\n    images: [image0, image1, image2, image3, image4, image5, image6],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      noOfWrong: 0,\r\n      guessed: new Set(),\r\n      answer: randomWord(),\r\n    };\r\n    this.handleGuess = this.handleGuess.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n\r\n  reset() {\r\n    this.setState({\r\n      noOfWrong: 0,\r\n      guessed: new Set(),\r\n      answer: randomWord(),\r\n    });\r\n  }\r\n\r\n  guessedWord() {\r\n    return this.state.answer\r\n      .split(\"\")\r\n      .map((letter) => (this.state.guessed.has(letter) ? letter : \"_\"));\r\n  }\r\n\r\n  handleGuess(evt) {\r\n    let letter = evt.target.value;\r\n    this.setState((st) => ({\r\n      guessed: st.guessed.add(letter),\r\n      noOfWrong: st.noOfWrong + (st.answer.includes(letter) ? 0 : 1),\r\n    }));\r\n  }\r\n\r\n  generateKeypad() {\r\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((letter) => (\r\n      <button\r\n        key={letter}\r\n        value={letter}\r\n        onClick={this.handleGuess}\r\n        disabled={this.state.guessed.has(letter)}\r\n      >\r\n        {letter}\r\n      </button>\r\n    ));\r\n  }\r\n\r\n  render() {\r\n\r\n    const gameOver = this.state.noOfWrong >= this.props.maxWrong;\r\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer;\r\n    let gameState = this.generateKeypad();\r\n    if (isWinner) gameState = \"Congrats, You have won the Game\";\r\n    if (gameOver) gameState = \"Better Luck Next Time\";\r\n    let restart = gameOver || isWinner;\r\n    return (\r\n\r\n        <div className=\"hang-game\">\r\n            <h1>hello</h1>\r\n      <div className=\"Hangman\">\r\n        <h2>Hangman</h2>\r\n        <img src={this.props.images[this.state.noOfWrong]} alt=\"HangMan\" />\r\n        <p>\r\n          Guessed Left: {this.props.maxWrong - this.state.noOfWrong} /{\" \"}\r\n          {this.props.maxWrong}\r\n        </p>\r\n        <p>Guess the Programming Language</p>\r\n        <p className=\"Hangman-word\">\r\n          {!gameOver ? this.guessedWord() : this.state.answer}\r\n        </p>\r\n        <p className=\"Hangman-btns\">{gameState}</p>\r\n        {restart && (\r\n          <button id=\"reset\" onClick={this.reset}>\r\n            Restart?\r\n          </button>\r\n        )}\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hangman;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}