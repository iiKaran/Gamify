{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\niten\\\\Desktop\\\\React\\\\Gamify\\\\src\\\\Games\\\\react-memo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Images from './Images';\nimport { useState } from \"react\";\nimport { shuffle } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cards, setCards] = useState(shuffle([...Images, ...Images]));\n  const [clicks, setClicks] = useState(0);\n  const [won, setWon] = useState(false);\n  const [activeCards, setActiveCards] = useState([]);\n  const [foundPairs, setFoundPairs] = useState([]);\n  function flipCard(index) {\n    if (won) {\n      setCards(shuffle([...Images, ...Images]));\n      setFoundPairs([]);\n      setWon(false);\n      setClicks(0);\n    }\n    if (activeCards.length === 0) {\n      setActiveCards([index]);\n    }\n    if (activeCards.length === 1) {\n      const firstIndex = activeCards[0];\n      const secondsIndex = index;\n      if (cards[firstIndex] === cards[secondsIndex]) {\n        if (foundPairs.length + 2 === cards.length) {\n          setWon(true);\n        }\n        setFoundPairs([...foundPairs, firstIndex, secondsIndex]);\n      }\n      setActiveCards([...activeCards, index]);\n    }\n    if (activeCards.length === 2) {\n      setActiveCards([index]);\n    }\n    setClicks(clicks + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: cards.map((card, index) => {\n        const flippedToFront = activeCards.indexOf(index) !== -1 || foundPairs.indexOf(index) !== -1;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-outer \" + (flippedToFront ? 'flipped' : ''),\n          onClick: () => flipCard(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: card,\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [won && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You won the game! Congratulations!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 47\n        }, this), \"Click any card to play again.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 42\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 48\n        }, this)]\n      }, void 0, true), \"Clicks: \", clicks, \" \\xA0\\xA0\\xA0 Found pairs:\", foundPairs.length / 2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HFCJzdhA2QjPLZ3VTTKqJDg+bh8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Images","useState","shuffle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","cards","setCards","clicks","setClicks","won","setWon","activeCards","setActiveCards","foundPairs","setFoundPairs","flipCard","index","length","firstIndex","secondsIndex","children","className","map","card","flippedToFront","indexOf","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/niten/Desktop/React/Gamify/src/Games/react-memo/src/App.js"],"sourcesContent":["import './App.css';\r\nimport Images from './Images';\r\nimport {useState} from \"react\";\r\nimport {shuffle} from 'lodash';\r\n\r\nfunction App() {\r\n  const [cards,setCards] = useState( shuffle([...Images, ...Images]) );\r\n  const [clicks,setClicks] = useState(0);\r\n  const [won,setWon] = useState(false);\r\n  const [activeCards,setActiveCards] = useState([]);\r\n  const [foundPairs,setFoundPairs] = useState([]);\r\n\r\n  function flipCard(index) {\r\n    if (won) {\r\n      setCards(shuffle([...Images, ...Images]));\r\n      setFoundPairs([]);\r\n      setWon(false);\r\n      setClicks(0);\r\n    }\r\n    if (activeCards.length === 0) {\r\n      setActiveCards([index]);\r\n    }\r\n    if (activeCards.length === 1) {\r\n      const firstIndex = activeCards[0];\r\n      const secondsIndex = index;\r\n      if (cards[firstIndex] === cards[secondsIndex]) {\r\n        if (foundPairs.length + 2 === cards.length) {\r\n          setWon(true);\r\n        }\r\n        setFoundPairs( [...foundPairs, firstIndex, secondsIndex] );\r\n      }\r\n      setActiveCards([...activeCards, index]);\r\n    }\r\n    if (activeCards.length === 2) {\r\n      setActiveCards([index]);\r\n    }\r\n    setClicks(clicks + 1);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        {cards.map((card,index) => {\r\n          const flippedToFront =  (activeCards.indexOf(index) !== -1) || foundPairs.indexOf(index) !== -1;\r\n          return (\r\n            <div className={\"card-outer \" + (flippedToFront ? 'flipped' : '')}\r\n                 onClick={() => flipCard(index)}>\r\n              <div className=\"card\">\r\n                <div className=\"front\">\r\n                  <img src={card} alt=\"\"/>\r\n                </div>\r\n                <div className=\"back\" />\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"stats\">\r\n        {won && (\r\n          <>You won the game! Congratulations!<br />\r\n            Click any card to play again.<br /><br />\r\n          </>\r\n        )}\r\n        Clicks: {clicks} &nbsp;&nbsp;&nbsp; Found pairs:{foundPairs.length/2}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}